import groovy.json.JsonSlurper

plugins {
   id 'java'
   id 'com.github.johnrengelman.shadow' version '8.1.1'
}

def pkgJson = new JsonSlurper().parseText(file('../package.json').text)
def props = [yamjsVersion: pkgJson.version]

dependencies {
   // common lib deps
   implementation project(':common')
   implementation 'com.eclipsesource.minimal-json:minimal-json:0.9.5'
   implementation 'me.carleslc.Simple-YAML:Simple-Yaml:1.8.4'

   // graal deps
   implementation "org.graalvm.js:js:${graalVersion}"
   implementation "org.graalvm.sdk:graal-sdk:${graalVersion}"
   implementation "org.graalvm.truffle:truffle-api:${graalVersion}"

   // platform-specific deps
   compileOnly "org.spigotmc:spigot-api:1.19.4-R0.1-SNAPSHOT"
}

jar {
   archiveBaseName.set('yamjs')
   archiveClassifier.set('paper')
   archiveVersion.set(pkgJson.version)
}

shadowJar {
   mergeServiceFiles()
   archiveBaseName.set('yamjs-paper')
   archiveClassifier.set('paper')
   archiveFileName.set('yamjs-paper.jar')
}

processResources {
   // populate version
   filesMatching('**/plugin.yml') {
      expand props + [yamjsPluginName: 'YamJS']
   }
}

repositories {
   mavenCentral()
   maven { url = 'https://jitpack.io' }
   maven { url = 'https://oss.sonatype.org/content/repositories/central' }
   maven { url = 'https://oss.sonatype.org/content/repositories/snapshots' }
   maven { url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
}

task processResourcesLegacy(type: Copy, dependsOn: processResources) {
   from 'src/main/resources'
   into "$buildDir/resources/legacy/main"
   filesMatching('**/plugin.yml') {
      expand props + [yamjsPluginName: 'grakkit']
   }
}


task buildLegacy(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
   dependsOn shadowJar, processResourcesLegacy
   configurations = shadowJar.configurations
   mergeServiceFiles()
   archiveBaseName.set('yamjs-legacy')
   archiveClassifier.set('paper-legacy')
   archiveVersion.set(pkgJson.version)
   archiveFileName.set('yamjs-paper-legacy.jar')

   from("$buildDir/resources/legacy/main") {
      include 'plugin.yml'
   }
   from(sourceSets.main.output) {
      exclude 'plugin.yml'
   }
}


task buildJars(dependsOn: [shadowJar, processResourcesLegacy, buildLegacy])
