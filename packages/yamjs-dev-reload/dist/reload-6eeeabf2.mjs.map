{"version":3,"file":"reload-6eeeabf2.mjs","sources":["../src/util/reload.ts"],"sourcesContent":["import http from 'http'\r\n\r\nconst context = {\r\n  hasInitialized: false,\r\n  isReloading: false,\r\n}\r\n\r\nexport const reload = (): void => {\r\n  if (!context.hasInitialized) {\r\n    context.hasInitialized = true\r\n    return\r\n  }\r\n\r\n  if (context.isReloading) return\r\n\r\n  const options = {\r\n    hostname: 'localhost',\r\n    port: 8000,\r\n    path: '/reload',\r\n    method: 'GET',\r\n  }\r\n\r\n  try {\r\n    context.isReloading = true\r\n\r\n    const req = http.request(options, (res) => {\r\n      res.on('data', (data) => {\r\n        context.isReloading = false\r\n\r\n        console.log('Reload successful')\r\n      })\r\n    })\r\n    req.on('error', (err) => {\r\n      console.log('Failed to connect...')\r\n      return setTimeout(reload, 1000)\r\n    })\r\n\r\n    setTimeout(() => {\r\n      req.end()\r\n    }, 1000)\r\n\r\n    return\r\n  } catch (err) {\r\n    console.log(err)\r\n    console.log('Failed to connect...')\r\n    setTimeout(reload, 1000)\r\n    return\r\n  }\r\n}\r\n"],"names":["context","reload","options","req","http","res","data","err"],"mappings":";AACA,MAAMA,IAAU;AAAA,EACd,gBAAgB;AAAA,EAChB,aAAa;AACf,GACaC,IAAS,MAAM;AACtB,MAAA,CAACD,EAAQ,gBAAgB;AAC3B,IAAAA,EAAQ,iBAAiB;AACzB;AAAA;AAEF,MAAIA,EAAQ;AAAa;AACzB,QAAME,IAAU;AAAA,IACd,UAAU;AAAA,IACV,MAAM;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,EAAA;AAEN,MAAA;AACF,IAAAF,EAAQ,cAAc;AACtB,UAAMG,IAAMC,EAAK,QAAQF,GAAS,CAAOG,MAAA;AACnC,MAAAA,EAAA,GAAG,QAAQ,CAAQC,MAAA;AACrB,QAAAN,EAAQ,cAAc,IACtB,QAAQ,IAAI,mBAAmB;AAAA,MAAA,CAChC;AAAA,IAAA,CACF;AACG,IAAAG,EAAA,GAAG,SAAS,CAAOI,OACrB,QAAQ,IAAI,sBAAsB,GAC3B,WAAWN,GAAQ,GAAI,EAC/B,GACD,WAAW,MAAM;AACf,MAAAE,EAAI,IAAI;AAAA,OACP,GAAI;AACP;AAAA,WACOI;AACP,YAAQ,IAAIA,CAAG,GACf,QAAQ,IAAI,sBAAsB,GAClC,WAAWN,GAAQ,GAAI;AACvB;AAAA,EACF;AACF;"}